
server.port=9091


# ===============================
# = DATA SOURCE
# ===============================

# Set here configurations for the database connection

# Connection url for the database "netgloo_blog"
spring.datasource.url = jdbc:mysql://localhost:3306/OnlineBanking

###AWS connections
###spring.datasource.url = jdbc:mysql://myrds.czxtmaqrp3tc.us-east-1.rds.amazonaws.com/OnlineBanking

# Username and secret
spring.datasource.username = scott
spring.datasource.password = tiger

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto = update

# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect


##spring.resources.add-mappings=true
##spring.resources.static-locations=classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/ 

##spring.thymeleaf.prefix=classpath:/templates/
##spring.thymeleaf.suffix=.html
##spring.thymeleaf.mode=HTML5
##spring.thymeleaf.encoding=UTF-8
##spring.thymeleaf.content-type=text/html # ;charset=<encoding> is added
